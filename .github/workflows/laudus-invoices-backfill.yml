name: Laudus Invoices - Backfill Historical Data

on:
  # Permitir ejecuci√≥n manual desde GitHub UI
  workflow_dispatch:
    inputs:
      start_year:
        description: 'A√±o inicial (ej: 2025)'
        required: false
        default: '2025'
      start_month:
        description: 'Mes inicial (1-12)'
        required: false
        default: '1'
      end_year:
        description: 'A√±o final (ej: 2025)'
        required: false
        default: '2025'
      end_month:
        description: 'Mes final (1-12)'
        required: false
        default: '10'
      skip_existing:
        description: 'Saltar meses existentes (true/false)'
        required: false
        default: 'false'

jobs:
  fetch-invoices:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # 2 hours max
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
      
      - name: üêç Setup Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      
      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt
      
      - name: üìä Fetch Monthly Invoices
        env:
          LAUDUS_API_URL: 'https://api.laudus.cl'
          LAUDUS_USERNAME: 'API'
          LAUDUS_PASSWORD: ${{ secrets.LAUDUS_PASSWORD }}
          LAUDUS_COMPANY_VAT: ${{ secrets.LAUDUS_COMPANY_VAT }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          MONGODB_DATABASE: 'laudus_data'
          INVOICES_START_YEAR: ${{ github.event.inputs.start_year || '2025' }}
          INVOICES_START_MONTH: ${{ github.event.inputs.start_month || '1' }}
          INVOICES_END_YEAR: ${{ github.event.inputs.end_year || '2025' }}
          INVOICES_END_MONTH: ${{ github.event.inputs.end_month || '10' }}
          SKIP_EXISTING_MONTHS: ${{ github.event.inputs.skip_existing || 'false' }}
          DELAY_BETWEEN_MONTHS: '5'  # 5 segundos entre cada mes
        run: |
          echo "üöÄ Starting invoices backfill..."
          echo "üìÖ Date range: $INVOICES_START_YEAR-$INVOICES_START_MONTH to $INVOICES_END_YEAR-$INVOICES_END_MONTH"
          python scripts/fetch_invoices_monthly.py
      
      - name: üì§ Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: invoices-logs-${{ github.run_number }}
          path: scripts/logs/*.log
          retention-days: 7
      
      - name: ‚úÖ Success notification
        if: success()
        run: |
          echo "‚úÖ Invoices backfill completed successfully!"
          echo "üìä Check MongoDB collection: invoices_by_month"
